#!/usr/bin/ruby

require 'rubygems'
require 'open4'
require 'sinatra'
require 'haml'
require 'yaml'

CONFIG = YAML::load_file(ARGV[0] || 'config.yml')

def do_magic
	result = plz_run_this CONFIG['command']
	parse_tests result
end

get '/' do

$results = do_magic

haml <<END
!!!
%html
	%head
		%title Dojo tester
		%link{:rel => "stylesheet", :href => "style.css", :media => "screen", :type => "text/css" }

	%body

		%h1 Results

		#{test_bar $results[:failed].size }
		%br

		.output_left
			%h2= notice $results
			- for f in $results[:failed]
				.fail
					%p= f[:test]
					%p= f[:cause]

		.output_right put something here
END

end

def parse_tests result
	require "drivers/#{CONFIG['driver']}"
	Parser.parse_tests result[:stdout], result[:stderr], result[:exitcode]
end

def notice tests
	num_fail = tests[:failed].size
	notice = num_fail == 0 ? "All tests passed!" : "Fuuuuu! #{num_fail} tests have failed..."
end

def test_results tests

	result << "%h2 #{notice}"

	result << tests[:failed].each do |f|
		"Test: #{f[:test]}\nlololol\nCause: #{f[:cause]}"
	end

	result.join("%br")
end

def test_bar num_errors

	type = num_errors > 0 ? 'red' : 'green'

	bar = "%img#start #{type}_start.png"
	bar += "%img#end #{type}_end.png"

#	div(bar, :class => 'test_bar')
	".test_bar{:style => \"color: #{type}\"} Imagine a #{type} bar here."
end

def plz_run_this command
	pid, stdin,stdout,stderr = Open4::popen4 command
	ignore,status = Process::waitpid2 pid
	{ :stdout => stdout.read, :stderr => stderr.read, :exitstatus => status.exitstatus }
end

